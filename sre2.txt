Site Reliability Engineering at Google

And Bjorn has mentioned a lot of things from the SRE book, specific to monitoring, thanks for the sales pitch. I will talk more about the philosophical background, the idea of site reliability engineering in general.
So site reliability engineering, it's kind of a weird name, so what does this site part come from? Well, essentially, Ben Trainor had a team of seven people running all of production and their mission back in 2003 was to keep the site up, where the site was Google.com.
And if Google.com is down, even back in 2003, that was big news and was very bad for the company. So that's a critical mission and that was their mission statement. Nowadays, site reliability engineering is much broader, there are lots of different services that are run by SRE teams, internal services, internal infrastructure, many different things, so maybe service reliability engineering is what you might like to think about it.
But then there's the second word in there, reliability. Well, I guess everyone agrees that reliability is a nice property, but is it really that important? I mean, as a developer, you can probably come up with a huge list of properties and things that you want to see in your software, and reliability is one of them, sure, but is it top priority, well, you could argue about that.
But let me prove it to you. So you probably all know a service from Google called Gmail. It's a web map thing. You probably have at least seen or maybe even used it. And if you look at that Gmail 2016, it has tons of nice features.
It sorts stuff into social and promotions automatically. It has this very powerful search and lots of things under the hood that you don't want to miss. Now imagine I would strip all of these nice features away and would give you a five-year-old version of Gmail.
 That would be really disappointing. You get used to all of these nice features. You don't want to lose them. But what if the alternative to a Gmail 2011 or so would be that of a product that I call? Gmail 500.
 Would you prefer that? Because it does not matter which features you have, which features you offer, if they're not available, if your users can't use them. So it's better to lose any kind of feature if you can make your system available and reliable.
 So that is the top feature that you want. But the problem here is reliability is a bit like oxygen. It's all around us, and yes, everyone knows we need it to survive. But because it's so ubiquitous, it's easy to take for granted.
 You quickly forget about it. And the problem is, when you notice that it's gone, it's kind of too late. And you are in a very dangerous situation then. And it probably will take you a long time to work yourself out of that situation again.
 So when a system systematically fails, there's probably not just one thing that went wrong, not two things, probably three, four, five things in parallel that went wrong, one after another. And then they caused this perfect storm that took down your whole website or something.
 Now, to get it up and running, often it's not sufficient to just fix one of those five things. Often you have to fix all of them. And until then, everything is on fire. So the problem here is you have to plan ahead to make sure that you stay reliable and not...
 But it's not something where you can just react and fix things when they break. Now the problem here is, as I said earlier, as a typical developer, you have so many things on your plate. And reliability is one of them.
 But there are other things that people pressure you to do, things to implement, things to take care of. You have to launch. There's a deadline. That's the monitoring later, right? We can add that. People will let us know when the service is done.
 So the real important thing here is that you have someone in your organization who is dedicated to reliability, whose sole purpose and mission is to make things reliable and to keep them reliable. And that person can speak up, that team can speak up and say, look, We need to take care of this, and we will take care of this.
 We own this topic. And that is why Site Reliability Engineering inside of Google is its own organization up to the SVP level. And that makes us very autonomous, and it gives us the voice to speak for reliability.
 Now, what do we do? This talk is about Site Reliability Engineering at Google, but there are lots of other companies that do Site Reliability Engineering. Some of them do it slightly different. You can read a lot about it in the book that was mentioned multiple times.
 
